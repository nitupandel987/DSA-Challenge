class Solution {
    public List<List<String>> solveNQueens(int n) {
        List<List<String>> res = new ArrayList<>();
        boolean board[][] = new boolean[n][n];
        queens(board, 0, res);
        return res;
    }

    public void queens(boolean board[][], int row, List<List<String>> res){
        if(row == board.length){
            ArrayList<String> arr = display(board);
            res.add(new ArrayList<>(arr));
            return;
        }

        for(int col = 0; col < board.length; col++){
            if(isSafe(board, row, col)){
                board[row][col] = true;
                queens(board, row+1, res);
                board[row][col] = false;
            }
        }
    }

    public boolean isSafe(boolean board[][], int row, int col){
       
       for(int i = row-1; i >= 0; i--){
           if(board[i][col])
           return false;
       }

        for(int i = row-1, j = col+1; i >= 0 && j < board.length; i--, j++){
             if(board[i][j])
           return false;
        }

        for(int i = row-1, j = col-1; i >= 0 && j >= 0 ; i--, j--){
             if(board[i][j])
           return false;
        }

        return true;
    }
    
    public ArrayList<String> display(boolean board[][]){
         ArrayList<String> list = new  ArrayList<String>();
        int n = board.length;
        for(int i = 0; i < n ;i++){
            String str = "";
            for(int j = 0; j < n; j++){
                if(board[i][j])
                {
                  str += "Q";
                }
                else{
                    str += ".";
                }
            }
            list.add(str);

        }
        return list;
    }

}
