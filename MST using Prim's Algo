class Solution{
   static class pair{
        int wt, node;
        pair(int wt, int node){
            this.wt = wt;
            this.node = node;
        }
    }
	static int spanningTree(int V, int E, int edges[][]){
	    
	    ArrayList<ArrayList<pair>> list = new ArrayList<>();
	    
	    for(int i = 0 ; i < V; i++){
	        list.add(new ArrayList<>());
	    }
	    
	    for(int i = 0 ; i < edges.length; i++){
	        int f = edges[i][0];
	        int s = edges[i][1];
	        int t = edges[i][2];
	       
	       list.get(f).add(new pair(t, s));
	       list.get(s).add(new pair(t, f));
	        
	    }
	    
	    int sum = 0;
	    PriorityQueue<pair> pq = new PriorityQueue<>((x, y) -> x.wt - y.wt);
	    
	    pq.add(new pair(0, 0));
	    boolean visited[] = new boolean[V];
	    
	    while(!pq.isEmpty()){
	        int wt = pq.peek().wt;
	        int node = pq.peek().node;
	        pq.poll();
	        
	        if(visited[node] == true)
	        continue;
	        
	        visited[node] = true;
	        sum += wt;
	        
	        for(pair p : list.get(node)){
	            int nn = p.node;
	            if(!visited[nn]){
	                pq.add(new pair(p.wt, nn));
	            }
	        }
	    }
	    return sum;
	    
	}
}
