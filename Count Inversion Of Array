public class Solution {
    public static long getInversions(long arr[], int n) {
        int start = 0, end = n - 1;
        return inversion(arr, start, end);
    }

    static long inversion(long arr[], int start, int end) {
        long res = 0;

        if (start < end) {
            int mid = start + (end - start) / 2;
            res += inversion(arr, start, mid);
            res += inversion(arr, mid + 1, end);

            res += countMerge(arr, start, mid, end);
        }

        return res;
    }

    static long countMerge(long arr[], int start, int mid, int end) {
        long res = 0;
        int n1 = mid - start + 1;
        int n2 = end - mid;
        long left[] = new long[n1];
        long right[] = new long[n2];

        for (int i = 0; i < n1; i++)
            left[i] = arr[start + i];

        for (int i = 0; i < n2; i++)
            right[i] = arr[mid + i + 1];

        int i = 0, j = 0, k = start;

        while (i < n1 && j < n2) {
            if (left[i] <= right[j]) {
                arr[k++] = left[i++];
            } else {
                arr[k++] = right[j++];
                res += (n1 - i);
            }
        }

        while (i < n1) {
            arr[k++] = left[i++];
        }
        while (j < n2) {
            arr[k++] = right[j++];
        }

        return res;
    }

    public static void main(String[] args) {
        long[] arr = { 1, 3, 2, 5, 4 };
        int n = arr.length;
        long inversions = getInversions(arr, n);
        System.out.println("Inversions: " + inversions);
    }
}
