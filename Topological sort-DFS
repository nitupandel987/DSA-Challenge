class Solution
{
    
    //DFS
    static int[] topoSort(int V, ArrayList<ArrayList<Integer>> adj) 
    {
      Stack<Integer> stk = new Stack<>();
      boolean visited[] = new boolean[V];
      Arrays.fill(visited, false);
      
      for(int i = 0 ; i < V; i++){
          if(!visited[i]){
              helper(adj, visited, stk, i);
          }
      }
      int res[] = new int[stk.size()];
      int i = 0;
      while(!stk.isEmpty()){
          res[i] = stk.pop();
          i++;
      }
     // System.out.println(Arrays.toString(res));
      return res;
    }
    public static void helper(ArrayList<ArrayList<Integer>> adj, boolean visited[], Stack<Integer> stk, int node){
        visited[node] = true;
        for(int it : adj.get(node)){
            if(!visited[it])
            helper(adj, visited, stk, it);
        }
        stk.push(node);
    }
}
