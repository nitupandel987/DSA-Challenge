
class Solution {
    class Pair{
        TreeNode node;
        int val;
        Pair(TreeNode node, int val){
            this.node = node;
            this.val = val;
        }
    }
    public int widthOfBinaryTree(TreeNode root) {
        int width = 1;
        Queue<Pair> pq = new LinkedList<>();
        pq.add(new Pair(root, 0));

        while(!pq.isEmpty()){
            int n = pq.size();
            int f = 0, s = 0;
            int min = pq.peek().val;
            int count = 0;

            while(count < n){
                Pair p = pq.poll();
                TreeNode nd = p.node;
                int val = p.val - min;
               // System.out.println("val"+val);
                if(count == 0){
                 f = val;
                }
                if(count == n-1){
                 s = val;
                }

                if(nd.left != null){
                    pq.add(new Pair(nd.left, 2*val+1));
                }
                if(nd.right != null){
                    pq.add(new Pair(nd.right,2*val+2));
                }
               count++;
            }
            //System.out.println(s+" "+f);
            width = Math.max(width, s-f+1);
        }

return width;

    }
}
