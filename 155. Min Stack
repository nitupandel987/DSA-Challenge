class MinStack {
    class pair{
        int f, s;
        pair(int f, int s){
            this.f = f;
            this.s = s;
        }
    }
    Stack<pair> stk;
    
    public MinStack() {
        stk = new Stack<>();
    }
    
    public void push(int val) {

        if(!stk.isEmpty()){
         int v = stk.peek().s;
         if(v < val){
             stk.push(new pair(val, v));
         }
         else{
             stk.push(new pair(val, val));
           }
        } 
        else{
            stk.push(new pair(val, val));
        }
    }
    
    public void pop() {
         if(!stk.isEmpty()){
             stk.pop();
         }
    }
    
    public int top() {
         if(!stk.isEmpty()){
             return stk.peek().f;
         }
         else{
             return -1;
         }
         
    }
    
    public int getMin() {
         if(!stk.isEmpty()){
             return stk.peek().s;
         }
         e else{
             return -1;
         }
    }
}

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack obj = new MinStack();
 * obj.push(val);
 * obj.pop();
 * int param_3 = obj.top();
 * int param_4 = obj.getMin();
 */
