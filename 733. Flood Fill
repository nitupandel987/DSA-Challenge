class Solution {
    class pair{
        int f, s;
        pair(int f, int s){
            this.f = f;
            this.s = s;
        }
    }
    public int[][] floodFill(int[][] image, int sr, int sc, int color) {
        if(color == image[sr][sc])
        return image;
        helper(image, sr, sc, color, image[sr][sc]);   
        return image;
    }
    public void helper(int[][] image, int sr, int sc, int color, int ini){
        Queue<pair> pq = new LinkedList<>();
        pq.add(new pair(sr, sc));
        image[sr][sc] = color;

        int delrow[] = {-1, 0, 1, 0};
        int delcol[] = {0, 1, 0, -1};

        while(!pq.isEmpty()){
            pair ele = pq.poll();
            int r = ele.f;
            int c = ele.s; 
           
            for(int i = 0 ; i < 4; i++){
                int nr = r + delrow[i];
                int nc = c + delcol[i];

                if(nr >= 0 && nr < image.length && nc >= 0 && nc < image[0].length && image[nr][nc] == ini){
                    pq.add(new pair(nr, nc));
                    image[nr][nc] = color;
                }
            }

        }
    }
}
