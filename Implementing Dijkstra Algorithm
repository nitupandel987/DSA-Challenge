class Solution
{
    static class pair{
        int first, sec;
        pair(int first, int sec){
            this.first = first;
            this.sec = sec;
        }
    }
    static int[] dijkstra(int V, ArrayList<ArrayList<ArrayList<Integer>>> adj, int S)
    {
        int dist[] = new int[V];
        Arrays.fill(dist, (int)1e9);
        
        PriorityQueue<pair> pq = new PriorityQueue<>((x, y) -> x.sec - y.sec);
    //Queue<pair> pq = new LinkedList<>();
        pq.add(new pair(S, 0));
        dist[S]= 0;
        
        while(!pq.isEmpty()){
            int node = pq.peek().first;
            int dt = pq.peek().sec;
            pq.poll();
            
            for(int i = 0 ; i < adj.get(node).size(); i++){
                int nd = adj.get(node).get(i).get(0);
                int wt = adj.get(node).get(i).get(1);
                
                if(dt + wt < dist[nd]){
                    dist[nd] = dt+wt;
                    pq.add(new pair(nd, dt+wt));
                }
            }
        }
        return dist;
             
    }
}

